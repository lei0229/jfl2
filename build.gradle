/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Lei' at '14/10/08 13:56' with Gradle 2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'eu.appsatori.fatjar'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'eu.appsatori.fatjar'
apply plugin: 'jacoco'

ext.repo = org.ajoberstar.grgit.Grgit.open(dir: '.')
ext.commitId = repo.head().abbreviatedId
ext.branch = repo.branch.getCurrent().getName()

//----------------------------------------
archivesBaseName = 'jfl'
version = "2.0.0-${commitId}"
jar.baseName = "${archivesBaseName}"

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(AbstractCompile) { options.encoding = 'UTF-8' }

//----------------------------------------
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath 'org.ajoberstar:gradle-git:1.0.0'
    }
}

//----------------------------------------
jar {
    manifest {
        def date = new Date()

        attributes(
                "Main-Class": "org.jfl2.fx.Main",
                "Implementation-Title": "FL by java",
                "Implementation-CommitId": commitId,
                "Implementation-Branch": branch,
                "Implementation-Version": version,
                "Implementation-Datetime": date.format("yyyy/MM/dd HH:MM:ss"),
                "Implementation-Host": InetAddress.getLocalHost().getCanonicalHostName(),
        )
    }
    exclude(
            "*.properties*"
    )
}

//----------------------------------------
fatJar {
    manifest = jar.manifest
    exclude(
            "META-INF/persistence.xml"
    )
    classifier "assembly"
    exclude('META-INF/*.DSA',
            'META-INF/*.RSA',
            'META-INF/*.SF',
            'META-INF/*.dsa',
            'META-INF/*.rsa',
            'META-INF/*.sf',
            'log4j.properties')
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    maven {
        url "https://repository.cloudera.com/artifactory/cloudera-repos/"
    }
}

configurations.all {
    exclude group: 'log4j', module: 'log4j'
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'org.mockito', module: 'mockito-all'
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile(
            // utils
            'commons-configuration:commons-configuration:1.10',        // configuration faile
            'commons-io:commons-io:2.4',        // io utils
            'net.schmizz:sshj:0.10.0',        // ssh
            'com.jcraft:jzlib:1.1.3',        // zip
            'org.codehaus.groovy:groovy:2.4.5', // Groovy
            'org.projectlombok:lombok:1.16.4',  // Lombok
            'args4j:args4j:2.32',               // Arguments parser

            // http-client
            'org.apache.httpcomponents:httpclient:4.4',
            'org.apache.httpcomponents:httpmime:4.4',

            // xml
            'xerces:xercesImpl:2.11.0',
            'javax.validation:validation-api:1.1.0.Final',

            // json
            'com.fasterxml.jackson.core:jackson-core:2.5.1',
            'com.fasterxml.jackson.core:jackson-databind:2.5.1',
            'com.fasterxml.jackson.core:jackson-annotations:2.5.1',

            // DB
            //'mysql:mysql-connector-java:5.1.34',
            //'org.hibernate:hibernate-core:4.3.8.Final',
            //'org.hibernate:hibernate-entitymanager:4.3.6.Final',
            //'org.hibernate:hibernate-validator:5.1.3.Final',

    )

    runtime(
            'ch.qos.logback:logback-core:1.1.2',
            'ch.qos.logback:logback-classic:1.1.2',
    )

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile(
            'org.hamcrest:hamcrest-all:1.3',
            'org.jetbrains:annotations:13.0',
            'org.jmockit:jmockit:1.15',
            'org.dbunit:dbunit:2.5.0',
            'junit:junit:4.12',
    )
}

//----------------------------------------
findbugs {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    effort = "max"
}

findbugsMain {
    effort = "max"
    reportLevel = "high"
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

//----------------------------------------
checkstyle {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/checkstyle")
    toolVersion = '6.2'
}

//----------------------------------------
//task checkstyleReport << {
//    ['main','test'].each { checkType ->
//        if(file("$project.buildDir/reports/checkstyle/${checkType}.xml").exists()) {
//            ant.xslt(in: "$project.buildDir/reports/checkstyle/${checkType}.xml",
//                    style: "config/checkstyle/checkstyle.xsl",  // There are not it now.
//                    out: "$project.buildDir/reports/checkstyle/checkstyle_${checkType}.html"
//            )
//        }
//    }
//}

//----------------------------------------
tasks.withType(Checkstyle) {
    configFile file('google_checks.xml')
}

//----------------------------------------
eclipse {
    project {
        //if you don't like the name Gradle has chosen
        name = archivesBaseName

        //if you want to specify the Eclipse project's comment
        //comment = 'Comments'

        //if you want to append some extra referenced projects in a declarative fashion:
        //referencedProjects 'someProject', 'someOtherProject'
        //if you want to assign referenced projects
        //referencedProjects = ['someProject'] as Set

        //if you want to append some extra natures in a declarative fashion:
        //natures 'some.extra.eclipse.nature', 'some.another.interesting.nature'
        //if you want to assign natures in a groovy fashion:
        //natures = ['some.extra.eclipse.nature', 'some.another.interesting.nature']

        //if you want to append some extra build command:
        //buildCommand 'buildThisLovelyProject'
        //if you want to append a build command with parameters:
        //buildCommand 'buildItWithTheArguments', argumentOne: "I'm first", argumentTwo: "I'm second"

        //if you want to create an extra link in the eclipse project,
        //by location uri:
        //linkedResource name: 'someLinkByLocationUri', type: 'someLinkType', locationUri: 'file://someUri'
        //by location:
        //linkedResource name: 'someLinkByLocation', type: 'someLinkType', location: '/some/location'
    }
}

// Returns home dir
task getHomeDir << {
    println gradle.gradleHomeDir
}

// Returns latest commit hash.
def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 7
/*
 * '.git/HEAD' contains either
 * in case of detached head: the currently checked out commit hash
 * otherwise: a reference to a file containing the current commit hash
 */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    //def isRef = head.length > 1 // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

// Returns current date.
def getDate() {
    def formattedDate = new Date().format('yyyyMMddHHmmss')
    return formattedDate
}

// ↓ここからが文字エンコーディング指定
// 普通にGroovyコードがかけるので、このようにdefaultEncodingローカル変数など
// を使って、DRYに指定することもできます。(その下がDRYっぽく見えないのは置いといて)
def defaultEncoding = 'UTF-8'
compileJava {
    options.encoding = defaultEncoding  // src/main/java配下の*.javaに影響
    // JAVA_OPTS=-Dfile.encoding で代替可能
}
compileTestJava {
    options.encoding = defaultEncoding  // src/test/java配下の*.javaに影響
    // JAVA_OPTS=-Dfile.encoding で代替可能
}
/*
compileGroovy {
	groovyOptions.encoding = defaultEncoding  // src/main/groovy配下の*.groovyに影響
	options.encoding = defaultEncoding		// src/main/groovy配下の*.javaに影響
}
compileTestGroovy {
	groovyOptions.encoding = defaultEncoding  // src/test/groovy配下の*.groovyに影響
	options.encoding = defaultEncoding		// src/test/groovy配下の*.javaに影響
}
*/
